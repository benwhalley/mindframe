# Generated by Django 5.1.6 on 2025-03-07 19:56

import django.db.models.deletion
import django_lifecycle.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("mindframe", "0028_alter_note_options"),
    ]

    operations = [
        migrations.AddField(
            model_name="intervention",
            name="default_speaker",
            field=models.ForeignKey(
                blank=True,
                help_text="The default speaker for this intervention (e.g. if used in a synthetic conversation)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="default_for_interventions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="stepjudgement",
            name="n_turns",
            field=models.PositiveSmallIntegerField(
                blank=True, help_text="If run by-turn, run the Judgement every N turns", null=True
            ),
        ),
        migrations.AddField(
            model_name="stepjudgement",
            name="offline",
            field=models.BooleanField(
                default=False, help_text="Run this Judgement offline, outside the reply loop"
            ),
        ),
        migrations.AlterField(
            model_name="step",
            name="opening_line",
            field=models.TextField(
                blank=True,
                help_text="Opening statement if no conversation history exists. E.g. 'How are you today? Leave blank to have the first line be generated by the prompt_template.'",
                null=True,
                verbose_name="Fixed opening line",
            ),
        ),
        migrations.AlterField(
            model_name="stepjudgement",
            name="when",
            field=models.CharField(
                choices=[
                    ("turn", "Every n turns"),
                    ("enter", "When entering the step"),
                    ("exit", "When exiting the step"),
                ],
                default="turn",
                max_length=10,
            ),
        ),
        migrations.AddConstraint(
            model_name="stepjudgement",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("n_turns__gte", 1), ("when", "turn")),
                    models.Q(("when", "turn"), _negated=True),
                    _connector="OR",
                ),
                name="n_turns_must_be_positive_for_turn",
            ),
        ),
        
    ]
