# Generated by Django 5.1.5 on 2025-02-06 12:23

import autoslug.fields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import mindframe.models
import pgvector.django.indexes
import pgvector.django.vector
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Intervention",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("short_title", models.CharField(max_length=20)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=False, populate_from="short_title", unique=True
                    ),
                ),
                ("version", models.CharField(editable=False, max_length=64, null=True)),
                ("sem_ver", models.CharField(max_length=64, null=True)),
            ],
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LLM",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "model_name",
                    models.CharField(
                        help_text="Litellm model name, e.g. llama3.2 or gpt-4o", max_length=255
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        help_text="Litellm API key, defaults to LITELLM_API_KEY",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "base_url",
                    models.CharField(
                        blank=True,
                        help_text="Litellm base URL defaults to LITELLM_ENDPOINT",
                        max_length=1024,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("system_developer", "System Developer"),
                            ("intervention_developer", "Intervention Developer"),
                            ("client", "Client"),
                            ("supervisor", "Supervisor"),
                            ("therapist", "Therapist"),
                        ],
                        default="client",
                        max_length=30,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Cycle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cycles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "intervention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Cycles",
                        to="mindframe.intervention",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Judgement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("slug", autoslug.fields.AutoSlugField(editable=False, populate_from="title")),
                ("variable_name", models.CharField(max_length=255)),
                (
                    "task_summary",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary of the task or question asked by this judgement. E.g. 'Evaluate the client's emotional state'.",
                        null=True,
                    ),
                ),
                ("prompt_template", models.TextField()),
                (
                    "intervention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="mindframe.intervention"
                    ),
                ),
            ],
            options={
                "unique_together": {("intervention", "slug"), ("intervention", "title")},
            },
        ),
        migrations.AddField(
            model_name="intervention",
            name="default_chunking_model",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="default_for_chunking",
                to="mindframe.llm",
            ),
        ),
        migrations.AddField(
            model_name="intervention",
            name="default_conversation_model",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="default_for_conversations",
                to="mindframe.llm",
            ),
        ),
        migrations.AddField(
            model_name="intervention",
            name="default_judgement_model",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="default_for_judgements",
                to="mindframe.llm",
            ),
        ),
        migrations.CreateModel(
            name="Step",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("order", models.PositiveSmallIntegerField(default=1)),
                ("slug", autoslug.fields.AutoSlugField(editable=False, populate_from="title")),
                ("prompt_template", models.TextField()),
                (
                    "intervention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="mindframe.intervention",
                    ),
                ),
            ],
            options={
                "ordering": ["intervention", "order", "title"],
            },
        ),
        migrations.CreateModel(
            name="StepJudgement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "when",
                    models.CharField(
                        choices=[
                            ("turn", "Each turn"),
                            ("enter", "When entering the step"),
                            ("exit", "When exiting the step"),
                        ],
                        default="turn",
                        max_length=10,
                    ),
                ),
                (
                    "once",
                    models.BooleanField(
                        default=False,
                        help_text="Once we have a non-null value returned, don't repeat.",
                    ),
                ),
                (
                    "use_as_guidance",
                    models.BooleanField(
                        default=False,
                        help_text="Allow this judgement to be used as guidance when generating responses to the client. Exposed as a list of {{guidance}} in the prompt template.",
                    ),
                ),
                (
                    "judgement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stepjudgements",
                        to="mindframe.judgement",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stepjudgements",
                        to="mindframe.step",
                    ),
                ),
            ],
            options={
                "unique_together": {("judgement", "step", "when")},
            },
        ),
        migrations.AddField(
            model_name="step",
            name="judgements",
            field=models.ManyToManyField(
                through="mindframe.StepJudgement", to="mindframe.judgement"
            ),
        ),
        migrations.CreateModel(
            name="TreatmentSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "uuid",
                    models.CharField(default=mindframe.models.s_uuid, editable=False, unique=True),
                ),
                ("started", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="mindframe.cycle",
                    ),
                ),
            ],
            options={
                "ordering": ["-started"],
            },
        ),
        migrations.CreateModel(
            name="Memory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("text", models.TextField()),
                (
                    "intervention",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memories",
                        to="mindframe.intervention",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mindframe.treatmentsession",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Memories",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="TreatmentSessionState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "previous_step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progressions_from",
                        to="mindframe.step",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress",
                        to="mindframe.treatmentsession",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="mindframe.step"
                    ),
                ),
            ],
            options={
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Turn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "uuid",
                    models.CharField(default=mindframe.models.s_uuid, editable=False, unique=True),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[("human", "Human"), ("AI", "AI")], default="human", max_length=25
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("text", models.TextField(blank=True, null=True)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Additional data like preparation, hidden tokens, LLM call chains etc.",
                        null=True,
                    ),
                ),
                (
                    "session_state",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="turns",
                        to="mindframe.treatmentsessionstate",
                    ),
                ),
                (
                    "speaker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SyntheticConversation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("start_time", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "additional_turns_scheduled",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of additional turns scheduled for this conversation (should be completed by a worker task — don't edit directly)",
                    ),
                ),
                (
                    "session_one",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversation_one",
                        to="mindframe.treatmentsession",
                    ),
                ),
                (
                    "session_two",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversation_two",
                        to="mindframe.treatmentsession",
                    ),
                ),
                (
                    "last_speaker_turn",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mindframe.turn",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "uuid",
                    models.CharField(default=mindframe.models.s_uuid, editable=False, unique=True),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("inputs", models.JSONField(blank=True, default=dict, null=True)),
                ("data", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "judgement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="mindframe.judgement",
                    ),
                ),
                (
                    "turn",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="mindframe.turn",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LLMLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("timestamp", models.DateTimeField(default=django.utils.timezone.now)),
                ("variable_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "log_type",
                    models.CharField(
                        choices=[("ERROR", "Error"), ("USAGE", "Usage")],
                        default="USAGE",
                        max_length=25,
                    ),
                ),
                ("message", models.TextField(blank=True, null=True)),
                ("prompt_text", models.TextField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict, null=True)),
                (
                    "judgement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mindframe.judgement",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mindframe.llm",
                    ),
                ),
                (
                    "step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mindframe.step",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mindframe.treatmentsession",
                    ),
                ),
                (
                    "turn",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="llm_calls",
                        to="mindframe.turn",
                    ),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="intervention",
            unique_together={("title", "version", "sem_ver")},
        ),
        migrations.CreateModel(
            name="MemoryChunk",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "embedded_text",
                    models.TextField(
                        blank=True,
                        help_text="The actual text embedded (may include extra tokens to contextualise/summarise passage to aid matching)",
                        null=True,
                    ),
                ),
                (
                    "start",
                    models.IntegerField(
                        help_text="The start position of the chunk in the memory (chars)"
                    ),
                ),
                (
                    "end",
                    models.IntegerField(help_text="The end position of the chunk in the memory"),
                ),
                ("embedding", pgvector.django.vector.VectorField(dimensions=1024, null=True)),
                (
                    "memory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="mindframe.memory",
                    ),
                ),
            ],
            options={
                "indexes": [
                    pgvector.django.indexes.HnswIndex(
                        ef_construction=64,
                        fields=["embedding"],
                        m=16,
                        name="embedding_index",
                        opclasses=["vector_cosine_ops"],
                    )
                ],
            },
        ),
        migrations.AlterUniqueTogether(
            name="step",
            unique_together={("intervention", "slug"), ("intervention", "title")},
        ),
        migrations.CreateModel(
            name="Transition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "conditions",
                    models.TextField(
                        blank=True,
                        help_text="Python code to evaluate before the transition can be be made. Each line is evaluated indendently and all must be True for the transition to be made. Variables created by Judgements are passed in as a dictionary.",
                    ),
                ),
                (
                    "from_step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transitions_from",
                        to="mindframe.step",
                    ),
                ),
                (
                    "to_step",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transitions_to",
                        to="mindframe.step",
                    ),
                ),
            ],
            options={
                "unique_together": {("from_step", "to_step", "conditions")},
            },
        ),
    ]
