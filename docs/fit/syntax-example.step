# PERSONA

It's good practice to instruct AI models to adopt a persona and highlight 
heir expertise. For example we might say

        You are an AI: An expert in behaviour change techniques.


# ENRICHING THE CONTEXT

By giving context and instructions to the AI, we can help it to provide more 
relevant responses. We can do this by 

1. Hand-writing instructions into the prompt
2. Dynamically querying a database of good examples
3. Including notes made by Judgements, earlier in the conversation
4. Including all or part of the conversation history (turns)


## Dynamically including good examples

Examples are (potentially long) texts attached to interventions in the database, and
are designd to provide examples of good practice.

The syntax for including examples is:

        {% examples "therapist introducing multisensory imagery" %}
        
        
Depending on the examples saved in the database, this might include text like this:

```
CLIENT: I don't know if I can do this. I've tried so many times before and failed.

> The therapist encourages multisensory imagery about a positive future state:
THERAPIST: I'd like to imagine yourself at your daughter's graduation, and having lost some weight. What would that be like? Can you see yourself there? What do you smell? How is it to be in the room?
        
```



##### Dyanamic querying/using stored data

We can also query the database for specific types of examples. For example, we might want to
refer to something the client has said when querying for good examples.

In all templates, there is a variable called `notes` which contains all the notes made by Judgements.
We can use this to update our templates dynamically. For example, writing this would specifically instruct 
the AI that the client is working on whatever was previously identified as a problem.

        You are working with a client to help them with {{data.problem_identified.problem}}. 
    
    
We can also use this notes variable within a query:
        
        {% examples data.problem_identified.problem %}

In this case, the `data.problem_identified.problem` variable is used directly as a lookup in the database.


##### Adjusting what is included

There are two options to 'tweak' to adjust how 
inclusive the results are:

        {% examples "therapist introducing multisensory imagery"  n=1 window=0 %}


This would reduce the set of results. First, only n=1 result is returned. 
Additionally, the 'window' is set to 0, meaning that only the top-matching sentence
is shown. If window is set > 0 then the sentences before and after the matching results 
are also shown.


```
> The therapist encourages multisensory imagery about a positive future state:
```



## Notes from previous judgements

Notes made from previous judgements can be included in the template, using the `data` variable.
For example:

            {{data.problem_identified.problem}}
            {{data.preferred_name.name}}


This is a convenient way to access previous notes, but the `notes` tag  provides additional functionality.
By default, this will output the _most recent_ note for each type of judgement:

        {% notes %}


We can select a specific note by name (i.e. `variable_name` of the Judgement):

        {% notes "emotional_state" %}

This includes all the Notes made when the 'emotional_state' Judgement ran in previous Turns.


And you can also include _all_ notes, not just the most recent. This includes all the records
of emotional state made in every turn (this can be a lot of data):

        {% notes "emotional_state" only_most_recent=False %}

For advanced templates this returns the structured data of notes:

        {% notes  'welcome' only_most_recent=False string=False as all_notes %}
        {% for n in all_notes %}
        {{n.judgement.title}}: {{n.data.done}} ({{n.timestamp}})
        {% endfor %}



## CONVERSATION HISTORY

By default, each call to the AI is a 'blank slate' and will not remember what
the client has said before.

We may want to provide the AI with the previous turns in the conversation.
The `turn` tag does this for us.

To include ALL utterances from the whole conversation so far:

        {% turns "all" %}   
        

Results are formatted like this:

```
SPEAKER 1: How are you today?
SPEAKER 2: Fine thanks ...
```


This only includes turns from the current step:

        {% turns "step" %}


This restricts to the last 5 turns in this step:
        
        {% turns "step" n=5 %}



# INSTRUCTING THE AI HOW TO RESPOND

There is evidence that asking the AI to think and respond in a structured way
can improve the quality of the responses.

`mindframe` includes the ability to break up a task into multiple parts, scripting
a conversation with the AI.

At any point in the template we we can use [[square_brackets]] to instruct the AI 
to respond. Each time the AI responds, this text is included in the context/instructions
of subseuqent responses.

When responding to a client we might break up the talk into 'thinking' and 'speaking' parts.

Before speaking, we can give the AI instructions like these:

        Please think step by step.

        - What have you said previously? 
        - Is the client asking you anything? 

        [[think:PLANS]]


Here we ask the model to `think` using the square-bracket tag. We save the 
response as `PLANS` (this response can be inspected later).

There are several different types of responses we can instruct the AI to make:

- `think` (extended note-form responses)
- `speak` (spoken responses in natural dialogue)
- `pick` (selecting from a list of options; this is explained in the example template for Judgements)
- `boolean` (yes/no responses; again see the example template for Judgements)

Having elicited a plan, we can _continue_ the conversation with the AI and ask it
to use it's thoughts to craft a better spoken response. After the final response tag below, 
the spoken response from the  AI will respond is returned to the user, and the Turn is over.

        Now, respond to the client:

            - speak naturally
            - use British English

        [[speak:RESPONSE]]
        